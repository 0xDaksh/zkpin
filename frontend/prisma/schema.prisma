// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommitmentPool {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String? // optional description
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  operator   Operator @relation(fields: [operatorId], references: [id])
  operatorId Int      @unique
  threshold  Int // set by the operator (size after which everything is publicly revealed)

  signatures    Signature[]
}

model Operator {
  id              Int             @id @default(autoincrement())
  operator_key    String
  commitment_pool CommitmentPool?
}

model Ipfs {
  id Int @id @unique @default(autoincrement())
  ipfsHash String
  pinSize Int
  timestamp String
  signature Signature?
}

model Signature {
  id                Int            @id @default(autoincrement())
  // for zkSNARK
  proof             Json
  publicSignals     Json
  ciphertext        String[]
  ipfs Ipfs @relation(fields: [ipfsId], references: [id])
  ipfsId Int @unique
  commitment_pool   CommitmentPool @relation(fields: [commitment_poolId], references: [id])
  commitment_poolId Int
}


// for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  serializedPublicKey String?   @unique
  name                String?
  username            String?   @map("username")
  email               String?   @unique
  emailVerified       DateTime? @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
