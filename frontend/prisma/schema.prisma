generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CommitmentPool {
  id                 Int         @id @unique @default(autoincrement())
  title              String
  description        String?
  created_at         DateTime    @default(now()) @db.Timestamptz(6)
  operatorId         Int         @unique
  threshold          Int
  operator           Operator    @relation(fields: [operatorId], references: [id])
  signatures         Signature[]
  revealedPublicKeys User[]
}

model Operator {
  id              Int             @id @default(autoincrement())
  operator_key    String
  commitment_pool CommitmentPool?
}

model Ipfs {
  id        Int        @id @unique @default(autoincrement())
  ipfsHash  String
  pinSize   Int
  timestamp String
  Signature Signature?
}

model Signature {
  id                Int            @id @default(autoincrement())
  ciphertext        String[]
  ipfsId            Int            @unique
  commitment_poolId Int
  commitment_pool   CommitmentPool @relation(fields: [commitment_poolId], references: [id])
  ipfs              Ipfs           @relation(fields: [ipfsId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String          @id @default(cuid())
  serializedPublicKey String?         @unique
  name                String?
  username            String?
  email               String?         @unique
  emailVerified       DateTime?       @map("email_verified")
  image               String?
  accounts            Account[]
  sessions            Session[]
  CommitmentPool      CommitmentPool? @relation(fields: [commitmentPoolId], references: [id])
  commitmentPoolId    Int?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
